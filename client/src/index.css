@tailwind base;
@tailwind components;
@tailwind utilities;

/* DARK MODE (Primary - Dark Web Theme) */
:root {
  --button-outline: rgba(0,255,170, .15);
  --badge-outline: rgba(0,255,170, .08);

  /* Automatic computation of border around primary / danger buttons */
  --opaque-button-border-intensity: 12; /* In terms of percentages */

  /* Backgrounds applied on top of other backgrounds when hovered/active */
  --elevate-1: rgba(0,255,170, .05);
  --elevate-2: rgba(0,255,170, .12);

  --background: 140 8% 8%;
  --foreground: 140 80% 85%;
  --border: 140 15% 18%;
  --card: 140 10% 11%;
  --card-foreground: 140 75% 82%;
  --card-border: 140 15% 15%;
  --sidebar: 140 8% 9%;
  --sidebar-foreground: 140 70% 80%;
  --sidebar-border: 140 10% 13%;
  --sidebar-primary: 158 100% 45%;
  --sidebar-primary-foreground: 158 100% 98%;
  --sidebar-accent: 140 12% 15%;
  --sidebar-accent-foreground: 140 80% 85%;
  --sidebar-ring: 158 100% 50%;
  --popover: 140 10% 12%;
  --popover-foreground: 140 75% 80%;
  --popover-border: 140 12% 16%;
  --primary: 158 100% 45%;
  --primary-foreground: 158 100% 98%;
  --secondary: 140 10% 16%;
  --secondary-foreground: 140 80% 88%;
  --muted: 140 10% 14%;
  --muted-foreground: 140 20% 55%;
  --accent: 140 12% 16%;
  --accent-foreground: 140 80% 85%;
  --destructive: 0 85% 60%;
  --destructive-foreground: 0 85% 98%;
  --input: 140 20% 25%;
  --ring: 158 100% 50%;
  --chart-1: 158 95% 50%;
  --chart-2: 280 100% 65%;
  --chart-3: 200 90% 60%;
  --chart-4: 340 95% 65%;
  --chart-5: 40 95% 60%;

  --font-sans: 'JetBrains Mono', 'Fira Code', 'Courier New', monospace;
  --font-serif: 'Space Mono', 'Share Tech Mono', monospace;
  --font-mono: 'JetBrains Mono', 'Fira Code', monospace;
  --radius: .125rem;
  --shadow-2xs: 0px 1px 2px 0px hsl(158 100% 45% / 0.25);
  --shadow-xs: 0px 2px 4px 0px hsl(158 100% 45% / 0.30);
  --shadow-sm: 0px 2px 4px 0px hsl(158 100% 45% / 0.28), 0px 1px 2px -1px hsl(158 100% 45% / 0.35);
  --shadow: 0px 4px 6px 0px hsl(158 100% 45% / 0.32), 0px 2px 4px -1px hsl(158 100% 45% / 0.38);
  --shadow-md: 0px 6px 12px 0px hsl(158 100% 45% / 0.35), 0px 2px 6px -2px hsl(158 100% 45% / 0.40);
  --shadow-lg: 0px 10px 20px 0px hsl(158 100% 45% / 0.40), 0px 4px 8px -2px hsl(158 100% 45% / 0.45);
  --shadow-xl: 0px 20px 40px 0px hsl(158 100% 45% / 0.45), 0px 8px 16px -4px hsl(158 100% 45% / 0.50);
  --shadow-2xl: 0px 30px 60px 0px hsl(158 100% 45% / 0.55);
  --tracking-normal: 0.05em;
  --spacing: 0.25rem;

  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */
  --sidebar-primary-border: hsl(var(--sidebar-primary));
  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);
  --sidebar-accent-border: hsl(var(--sidebar-accent));
  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);
  --primary-border: hsl(var(--primary));
  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);
  --secondary-border: hsl(var(--secondary));
  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);
  --muted-border: hsl(var(--muted));
  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);
  --accent-border: hsl(var(--accent));
  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);
  --destructive-border: hsl(var(--destructive));
  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);
}

.dark {
  --button-outline: rgba(255,255,255, .10);
  --badge-outline: rgba(255,255,255, .05);

  --opaque-button-border-intensity: 9;  /* In terms of percentages */

  /* Backgrounds applied on top of other backgrounds when hovered/active */
  --elevate-1: rgba(255,255,255, .04);
  --elevate-2: rgba(255,255,255, .09);

  --background: 140 8% 8%;
  --foreground: 140 80% 85%;
  --border: 140 6% 18%;
  --card: 140 5% 12%;
  --card-foreground: 140 75% 82%;
  --card-border: 140 5% 16%;
  --sidebar: 140 6% 10%;
  --sidebar-foreground: 140 70% 80%;
  --sidebar-border: 140 5% 14%;
  --sidebar-primary: 158 100% 45%;
  --sidebar-primary-foreground: 158 100% 98%;
  --sidebar-accent: 140 8% 16%;
  --sidebar-accent-foreground: 140 80% 85%;
  --sidebar-ring: 158 100% 50%;
  --popover: 140 6% 14%;
  --popover-foreground: 140 75% 80%;
  --popover-border: 140 5% 18%;
  --primary: 158 100% 45%;
  --primary-foreground: 158 100% 98%;
  --secondary: 140 7% 18%;
  --secondary-foreground: 140 80% 88%;
  --muted: 140 8% 16%;
  --muted-foreground: 140 20% 55%;
  --accent: 140 10% 18%;
  --accent-foreground: 140 80% 85%;
  --destructive: 0 85% 60%;
  --destructive-foreground: 0 85% 98%;
  --input: 140 15% 35%;
  --ring: 158 100% 50%;
  --chart-1: 158 95% 65%;
  --chart-2: 280 100% 70%;
  --chart-3: 200 90% 65%;
  --chart-4: 340 95% 68%;
  --chart-5: 40 95% 65%;

  --shadow-2xs: 0px 1px 2px 0px hsl(158 100% 45% / 0.15);
  --shadow-xs: 0px 2px 4px 0px hsl(158 100% 45% / 0.20);
  --shadow-sm: 0px 2px 4px 0px hsl(158 100% 45% / 0.18), 0px 1px 2px -1px hsl(158 100% 45% / 0.25);
  --shadow: 0px 4px 6px 0px hsl(158 100% 45% / 0.22), 0px 2px 4px -1px hsl(158 100% 45% / 0.28);
  --shadow-md: 0px 6px 12px 0px hsl(158 100% 45% / 0.25), 0px 2px 6px -2px hsl(158 100% 45% / 0.30);
  --shadow-lg: 0px 10px 20px 0px hsl(158 100% 45% / 0.30), 0px 4px 8px -2px hsl(158 100% 45% / 0.35);
  --shadow-xl: 0px 20px 40px 0px hsl(158 100% 45% / 0.35), 0px 8px 16px -4px hsl(158 100% 45% / 0.40);
  --shadow-2xl: 0px 30px 60px 0px hsl(158 100% 45% / 0.45);
}

@layer base {
  * {
    @apply border-border;
  }

  body {
    @apply font-sans antialiased bg-background text-foreground;
  }
}

/**
 * Using the elevate system.
 * Automatic contrast adjustment.
 *
 * <element className="hover-elevate" />
 * <element className="active-elevate-2" />
 *
 * // Using the tailwind utility when a data attribute is "on"
 * <element className="toggle-elevate data-[state=on]:toggle-elevated" />
 * // Or manually controlling the toggle state
 * <element className="toggle-elevate toggle-elevated" />
 *
 * Elevation systems have to handle many states.
 * - not-hovered, vs. hovered vs. active  (three mutually exclusive states)
 * - toggled or not
 * - focused or not (this is not handled with these utilities)
 *
 * Even without handling focused or not, this is six possible combinations that
 * need to be distinguished from eachother visually.
 */
@layer utilities {

  /* Hide ugly search cancel button in Chrome until we can style it properly */
  input[type="search"]::-webkit-search-cancel-button {
    @apply hidden;
  }

  /* Placeholder styling for contentEditable div */
  [contenteditable][data-placeholder]:empty::before {
    content: attr(data-placeholder);
    color: hsl(var(--muted-foreground));
    pointer-events: none;
  }

  /* .no-default-hover-elevate/no-default-active-elevate is an escape hatch so consumers of
   * buttons/badges can remove the automatic brightness adjustment on interactions
   * and program their own. */
  .no-default-hover-elevate {}

  .no-default-active-elevate {}


  /**
   * Toggleable backgrounds go behind the content. Hoverable/active goes on top.
   * This way they can stack/compound. Both will overlap the parent's borders!
   * So borders will be automatically adjusted both on toggle, and hover/active,
   * and they will be compounded.
   */
  .toggle-elevate::before,
  .toggle-elevate-2::before {
    content: "";
    pointer-events: none;
    position: absolute;
    inset: 0px;
    border-radius: inherit;
    z-index: -1;
  }

  .toggle-elevate.toggle-elevated::before {
    background-color: var(--elevate-2);
  }

  /* If there's a 1px border, adjust the inset so that it covers that parent's border */
  .border.toggle-elevate::before {
    inset: -1px;
  }

  /* Does not work on elements with overflow:hidden! */
  .hover-elevate:not(.no-default-hover-elevate),
  .active-elevate:not(.no-default-active-elevate),
  .hover-elevate-2:not(.no-default-hover-elevate),
  .active-elevate-2:not(.no-default-active-elevate) {
    position: relative;
    z-index: 0;
  }

  .hover-elevate:not(.no-default-hover-elevate)::after,
  .active-elevate:not(.no-default-active-elevate)::after,
  .hover-elevate-2:not(.no-default-hover-elevate)::after,
  .active-elevate-2:not(.no-default-active-elevate)::after {
    content: "";
    pointer-events: none;
    position: absolute;
    inset: 0px;
    border-radius: inherit;
    z-index: 999;
  }

  .hover-elevate:hover:not(.no-default-hover-elevate)::after,
  .active-elevate:active:not(.no-default-active-elevate)::after {
    background-color: var(--elevate-1);
  }

  .hover-elevate-2:hover:not(.no-default-hover-elevate)::after,
  .active-elevate-2:active:not(.no-default-active-elevate)::after {
    background-color: var(--elevate-2);
  }

  /* If there's a 1px border, adjust the inset so that it covers that parent's border */
  .border.hover-elevate:not(.no-hover-interaction-elevate)::after,
  .border.active-elevate:not(.no-active-interaction-elevate)::after,
  .border.hover-elevate-2:not(.no-hover-interaction-elevate)::after,
  .border.active-elevate-2:not(.no-active-interaction-elevate)::after,
  .border.hover-elevate:not(.no-hover-interaction-elevate)::after {
    inset: -1px;
  }

  /* Glitch effect animations */
  @keyframes glitch {
    0%, 100% {
      transform: translate(0);
    }
    20% {
      transform: translate(-2px, 2px);
    }
    40% {
      transform: translate(-2px, -2px);
    }
    60% {
      transform: translate(2px, 2px);
    }
    80% {
      transform: translate(2px, -2px);
    }
  }

  @keyframes glitch-text {
    0%, 90% {
      text-shadow: 
        -2px 0 hsl(0 100% 50%),
        2px 0 hsl(158 100% 45%);
    }
    92%, 98% {
      text-shadow: 
        2px -2px hsl(0 100% 50%),
        -2px 2px hsl(158 100% 45%);
    }
    100% {
      text-shadow: 
        -2px 0 hsl(0 100% 50%),
        2px 0 hsl(158 100% 45%);
    }
  }

  @keyframes scanline {
    0% {
      transform: translateY(-100%);
    }
    100% {
      transform: translateY(100vh);
    }
  }

  @keyframes flicker {
    0%, 100% {
      opacity: 1;
    }
    50% {
      opacity: 0.8;
    }
  }

  @keyframes typing {
    from {
      width: 0;
    }
    to {
      width: 100%;
    }
  }

  @keyframes blink {
    0%, 100% {
      opacity: 1;
    }
    50% {
      opacity: 0;
    }
  }

  @keyframes glow-pulse {
    0%, 100% {
      box-shadow: 0 0 10px hsl(158 100% 45% / 0.5), 0 0 20px hsl(158 100% 45% / 0.3);
    }
    50% {
      box-shadow: 0 0 20px hsl(158 100% 45% / 0.8), 0 0 40px hsl(158 100% 45% / 0.5);
    }
  }

  .glitch {
    animation: glitch 0.3s cubic-bezier(0.25, 0.46, 0.45, 0.94) infinite;
  }

  .glitch-text {
    animation: glitch-text 0.4s infinite;
  }

  .scanline {
    position: relative;
    overflow: hidden;
  }

  .scanline::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 2px;
    background: linear-gradient(transparent, hsl(158 100% 45% / 0.3), transparent);
    animation: scanline 4s linear infinite;
    pointer-events: none;
    z-index: 999;
  }

  .scanline::after {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: repeating-linear-gradient(
      0deg,
      transparent,
      transparent 2px,
      hsl(140 50% 20% / 0.03) 2px,
      hsl(140 50% 20% / 0.03) 4px
    );
    pointer-events: none;
    z-index: 998;
  }

  .terminal-cursor::after {
    content: '▊';
    animation: blink 1s step-end infinite;
    color: hsl(158 100% 45%);
    margin-left: 2px;
  }

  .glow {
    box-shadow: 0 0 10px hsl(158 100% 45% / 0.5), 0 0 20px hsl(158 100% 45% / 0.3);
  }

  .glow-pulse {
    animation: glow-pulse 2s ease-in-out infinite;
  }

  .text-shadow-glow {
    text-shadow: 
      0 0 10px hsl(158 100% 45% / 0.8),
      0 0 20px hsl(158 100% 45% / 0.4),
      0 0 30px hsl(158 100% 45% / 0.2);
  }

  /* CRT screen effect */
  .crt-screen {
    position: relative;
  }

  .crt-screen::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: radial-gradient(ellipse at center, transparent 0%, rgba(0,0,0,0.3) 100%);
    pointer-events: none;
    z-index: 1000;
  }
}